1. C++ best strength (or most-liked feature)  
2. C++ worst weakness (or least-liked convention, or most-desired missing feature) 
3. Benefits of C++ over C Language 
    A. The object oriented programming style that you can do in C++ can make implemeting complex systems easier.
        OOP design patterns can help mimic the way the system is actually working which can help you think about the problems.

4. What is Objects?  
5. What is Class? 
6. What is Abstraction? 
7. What is Encapsulation? 
8. What is Inheritance? 
9. What is Polymorphism? 
10. What is Exception Handling? 
11. Difference Between malloc and new 
12. What is register storage class? 
13. Difference Between Structure in C and Class in C++ 
14. What is static member function 
15. What is const member function 
16. What is friend functions? 
17. Drawback of MACRO in C language 
18. Inline functions 
19. Constructor 
20. Type of Constructor  
21.  Constructor Overloading 
22. Destructor 
23. Namespace 
24. Static Variable 
25. Static Object 
26. Const Variable 
27. Pointers with const 
28. Constant Member Function 
29. Const Object 
30. Mutable Keyword 
31. References 
32. References Vs Pointers 
33. Constant Reference 
34. Copy Constructor 
35. Public Inheritance 
36. Private Inheritance 
37. Protected Inheritance 
38. Types of Inheritance 
39. Single Inheritance 
40. Multiple Inheritance 
41. Hierarchical Inheritance 
42. Multilevel Inheritance
43. Hybrid(Virtual) Inheritance 
47. Functions that are never inherited 
48. assignment operator = is never inherited. It can be overloaded but can't be inherited by sub class." 
49. Virtual Inheritence 
50. Polimorphism 
51. Function Overriding 
52. Static Binding 
53. Late Binding 
54. Virtual Function 
55. How Late Binding occurs 
56. Abstract Class 
57. Pure Virtual Function 
58. Why can't we create Object of Abstract Class ? 
59. Virtual Destructor 
60. Operator Overloading 
61. is a - has relationship 
   https://www.researchgate.net/post/What_is_a_difference_in_Is-a_and_has-a_relationship_of_inheritance_of_c 
62. Singleton Design Pattern/Singleton Class 